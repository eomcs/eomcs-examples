// # 아이템 44. 표준 함수형 인터페이스를 사용하라
// - java.util.function 패키지에 표준 함수형 인터페이스가 제공된다.
// - 필요한 용도에 맞는게 있다면, 직접 정의하지 말고 표준 함수형 인터페이스를 활용하라.
//   그러면 API가 다루는 개념의 수가 줄어들어 익히기 더 쉬워진다.
// - 표준 함수형 인터페이스는 유용한 디폴트 메서드를 많이 제공하므로
//   다른 코드와의 상호운용성도 크게 좋아진다.

package effectivejava.ch07.item44.exam02;

// [주제] 표준 함수형 인터페이스 대신 코드를 직접 작성해야 할 때
// - 표준 함수형 인터페이스 중 용도에 맞는 것이 없을 때
// - 다음 사항에 해당하는 경우,
//   - 자주 쓰이며, 이름 자체가 용도를 명확히 설명해준다.
//   - 반드시 따라야 하는 규약이 있다.
//   - 유용한 디폴트 메서드를 제공할 수 있다.

// [@FunctionalInterface 애너테이션]
// - 해당 클래스의 코드나 설명 문서를 읽는 이에게 그 인터페이스가 람다용으로 설계된 것임을 알려준다.
// - 해당 인터페이스가 추상 메서드를 오직 하나만 가지고 있어야 컴파일된다.
//   즉 유지보수 과정에서 누군가 실수로 메서드를 추가하지 못하게 막아준다.
// - 직접 만든 함수형 인터페이스에는 항상 이 애너테이션을 붙여라.

// [주의할 점]
// - 서로 다른 함수형 인터페이스를 같은 위치의 아규먼트로 받는 메서드를 여러 개 정의하지 말라.
//   예) ExecutorService: submit(Runnable), submit(Callable<T>)
//   람다 표현식이 어느 메서드에 해당하는지 컴파일러가 알 수 없어 모호성 오류가 발생한다.
//   개발자가 형변환을 해주어야 한다.

public class Test {
  public static void main(String[] args) {}
}
