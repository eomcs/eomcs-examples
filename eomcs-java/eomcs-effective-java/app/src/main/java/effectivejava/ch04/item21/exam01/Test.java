// # 아이템 21. 인터페이스는 구현하는 쪽을 생각해 설계하라
// [디폴트 메서드]
// - Java 8부터 인터페이스에 디폴트 메서드를 추가할 수 있다.
// - 기존 메서드에 영향을 주지 않으면서 인터페이스에 메서드를 추가할 수 있다.
// - 인터페이스에 메서드를 추가할 때마다 구현 클래스를 수정해야 하는 부담을 덜어준다.
// - 새로운 인터페이스를 만드는 경우 특히,
//   표준적인 메서드 구현을 제공하는 데 아주 유용한 수단이다.
//   인터페이스를 좀 더 쉽게 구현해 활용할 수 있게 해준다.
//
// [디폴트 메서드의 한계]
// - 생각할 수 있는 모든 상황에서 불변식을 해치지 않는 디폴트 메서드를 작성하는 것은 어렵다.
// - 기존 구현체에 런타임 오류를 일으킬 수 있다.
//   기존 인터페이스에 디폴트 메서드로 새 메서드를 추가하는 일은 꼭 필요한 경우가 아니면 피해야 한다.
//   추가하려는 디폴트 메서드가 기존 구현체들과 충돌하지는 않을지 심사숙고해야 한다.
// - 인터페이스로부터 메서드를 제거하거나, 기존 메서드의 시그너처를 수정하는 용도가 절대 아니다.
//
// [인터페이스 릴리스]
// - 인터페이스를 한 번 공개하게 되면 추후 수정하는게 불가능하다.
// - 릴리스 전 반드시 테스트를 수행하라.
// - 다양한 방식으로 구현하고 테스트하라.
// - 인터페이스의 인스턴스를 다양한 작업에 활용하는 클라이언트로 여러 개 만들어봐야 한다.
// - 잘못된 인터페이스를 나중에 바로잡을 기회는 영원히 없다.

package effectivejava.ch04.item21.exam01;

// [주제] 인터페이스의 디폴트 메서드 활요시 주의 사항

public class Test {
  public static void main(String[] args) throws Exception {}
}
