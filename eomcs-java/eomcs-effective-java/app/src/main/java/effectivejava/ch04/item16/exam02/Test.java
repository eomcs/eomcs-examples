// # 아이템 16. public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라
// - 패키지 바깥에서 접근할 수 있는 public 클래스
//   - 필드는 private으로 숨기고, 접근자 메서드를 제공하라.
//   - 그래야, 내부 표현 방식을 언제든 바꿀 수 있는 유연성을 얻을 수 있다.
//   - public 클래스가 필드를 공개하는 순간, 이를 사용하는 클라이언트가 생겨날 것이고,
//     내부 표현 방식을 마음대로 바꾸기 어려워진다.
// - package-private 클래스 또는 private 중첩 클래스라면 필드를 공개해도 된다.
//   - 클래스 선언 면에서나 이를 사용하는 클라이언트 코드 면에서나
//     접근자 방식보다 훨씬 깔끔하다.
//   - 이런 클래스를 사용하는 클라이언트도 패키지 안에서만 동작하는 코드이기 때문에
//     클래스의 내부 표현 방식이 바뀌어도 그 영향은 패키지 안에서만 머문다.
//     따라서 패키지 바깥 코드에는 전혀 영향을 끼치지 않는다.
//   - private 중첩 클래스의 경우에는 수정에 영향을 받는 범위는 훨씬 제한된다.
//     즉 바깥 클래스까지만 영향을 끼친다.

package effectivejava.ch04.item16.exam02;

// [주제]
// public 클래스의 public 필드 사용으로 인한 문제점이 발생된 예:
// - 자바 표준 라이브러리의 Point, Dimension 클래스는 public 필드를 가지고 있다.
// - 내부를 노출한 이들 클래스의 심각한 성능 문제가 드러났음에도 해결하지 못하고 있다.
//   왜? 이들 클래스를 널리 사용하는 되고 있기 때문에 함부로 코드를 수정할 수 없다.

import java.awt.Dimension;
import java.awt.Point;

public class Test {
  public static void main(String[] args) throws Exception {
    Point p1 = new Point();
    p1.x = 3; // Point의 필드를 직접 사용
    p1.y = 4; // Point의 필드를 직접 사용
    System.out.printf("(%d, %d)%n", p1.x, p1.y); // Point의 필드를 직접 사용

    Dimension d1 = new Dimension();
    d1.width = 50; // Dimension의 필드를 직접 사용
    d1.height = 60; // Dimension의 필드를 직접 사용
    System.out.printf("(%d, %d)%n", d1.width, d1.height); // Dimension의 필드를 직접 사용

    // [Point/Dimension 클래스의 성능 문제]
    // 1) 방어적 복사(defensive copy) 남발
    // - 가변 필드를 공개했기 때문에 외부에서 필드 값을 손쉽게 바꿀 수 있다.
    // - 외부에서 필드 값을 함부로 변경하지 못하도록 하기 위해
    //   AWT/Swing 쪽에서는 내부 상태를 넘길 때 "방어적 복사"를 할 수 밖에 없다.
    //   즉 내부 상태를 직접 넘기는 대신 복사본을 만들어 넘기는 것이다.
    // - 이런 방어적 복사 때문에 불필요한 객체 생성과 쓰레기 수집이 빈번히 일어날 수 밖에 없고,
    //   이것이 성능 저하로 이어지는 것이다.
    // 2) 필드 변경을 가로채지 못함
    // - 필드가 변경될 때 이를 가로채서 무언가를 해야할 때까 있다.
    //   예를 들어, GUI 컴포넌트의 위치/크기가 바뀌면 이를 다시 그려야 한다거나,
    //   기존 값을 무효화하거 다시 값을 캐싱한다거나,
    //   불변식을 검증해야 한다거나,
    //   변경 사실을 통지해야 하는 경우가 있다.
    // - 그런데 필드를 직접 접근해서 값을 변경하다보니, 이런 작업들을 할 수가 없어서
    //   안전을 위해 더 자주 복사하거나
    //   매 호출 때마다 계산을 다시 하는 등의 비효율적인 작업이 많아지게 되고,
    //   이것이 성능 저하로 이어지는 것이다.

    // [결론]
    // - 이 문제를 해결하려면 Point/Dimension 클래스의 필드를 private으로 바꿔야 하는데,
    //   이미 이 API가 널리 사용되고 있기 때문에 함부로 이들 코드를 변경할 수 없다.
    // - public 클래스에서는 public 필드를 사용하지 말자!
    // - 필드를 불변으로 만들어도 이런 문제가 완전히 해결되지는 않는다.
    // - 단, package-private 클래스나 private 중첩 클래스인 경우
    //   필드를 노출하는 편이 나을 때도 있다.

  }
}
