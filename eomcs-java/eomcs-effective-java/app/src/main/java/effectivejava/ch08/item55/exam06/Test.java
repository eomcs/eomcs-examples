// # 아이템 55. 옵셔널 반환은 신중히 하라
// - 값을 반환하지 못할 가능성이 있고, 호출할 때마다 반환값이 없을 가능성을 염두에 둬하는 경우,
//   옵셔널을 반환하는 것이 유용할 수 있다.
// - 옵셔널 반환에는 성능 저하가 뛰따르니,
//   성능에 민감한 메서드라면 null을 반환하거나 예외를 던지는 편이 나을 수 있다.
// - 옵셔널을 반환값 이외의 용도로 쓰는 경우는 매우 드물다.
//

package effectivejava.ch08.item55.exam06;

// [주제] Optional<T> 사용 시 주의할 점:
// 1) 컬렉션, 스트림, 배열, 옵셔널 같은 컨테이너 타입은 옵셔널로 감싸면 안된다.
//    빈 Optional<List<T>>보다는 빈 List<T>를 반환하는 편이 낫다.
//    빈 컨테이너를 그대로 반환하면, 불필요한 옵셔널 언박싱 비용이 들지 않는다.
// 2) T 대신 Optional<T>를 반환해야 할 때,
//    결과가 없을 수 있으며 클라이언트가 이 상황을 특별하게 처리해야 하는 경우다.
//    대신 성능 저하를 피할 수 없다.
//    Optional 객체를 생성하고 값을 꺼내기 위해 메서드 호출해야 하기 때문이다.
// 3) 박싱된 기본 타입을 담은 옵셔널을 반환하는 일은 없도록 하자.
//    int, long, double 전용 옵셔널(OptionalInt, OptionalLong, OptionalDouble)을 사용하라.
//    단, 그외 기본 타입은 별도의 옵셔널이 없기 때문에 옵셔널에 담아서 반환할 수 밖에 없다.
// 4) 옵셔널을 컬렉션의 key, value, 원소나 배열의 원소로 사용하는 일은 피하라.
//    예를 들어 맵에 해당 key가 존재하는지 확인하려면 두 번 검사해야 한다.
//    key가 없는 경우와 key는 있지만 빈 옵셔널인 경우다.
//    쓸데없이 복잡성만 높여서 혼란과 오류 가능성을 키울 뿐이다.
// 
//


public class Test {

  public static void main(String[] args) {
  }
}
