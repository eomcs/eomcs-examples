// # 아이템 59. 라이브러리를 익히고 사용하라
// - 바퀴를 다시 발명하지 말자.
//   아주 특별한 나만의 기능이 아니라면 누군가 이미 라이브러리 형태로 만들어 놓았을 가능성이 크다.
//   그런 라이브러리가 있다면 쓰면 된다.
//   있는지 잘 모르겠다면 찾아보라.
// - 일반적으로 라이브러리의 코드는 직접 작성한 것보다 품질이 좋고, 점차 개선될 가능성이 크다.
//   코드 품질에도 규모의 경제가 적용된다.
//   많은 사람의 눈에 노출되는 만큼, 버그가 발견될 가능성이 크고, 발견된 버그가 수정될 가능성도 크다.
//
package effectivejava.ch09.item59.exam02;

// [주제] 개발자가 표준 라이브러리를 사용하지 않고 직접 구현하는 이유
// - 라이브러리에 그런 기능이 있는지 모르기 때문이다.
// - 메이저 릴리즈마다 주목할 만한 수많은 기능이 라이브러리에 추가된다.
// - 릴리즈마다 새로운 기능을 설명하는 웹페이지를 공시하는데,
//   개발자들은 그런 페이지를 꼼꼼히 살펴보지 않는다.
//
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;

public class Test {

  public static void main(String[] args) {
    // 리눅스의 curl 명령어를 흉내내기
    // - transferTo() 메서드를 이용해 URL의 내용을 지정된 출력 스트림으로 내보낼 수 있다.
    // - Java 9에 추가된 메서드다.
    try (InputStream in = new URL("https://www.naver.com").openStream()) {
      in.transferTo(System.out); // URL의 내용을 표준 출력 장치인 콘솔로 출력
    } catch (IOException e) {
      e.printStackTrace();
    }

    // [정리]
    // - java.lang, java.util, java.io와 그 하위 패키지들에 익숙해져야 한다.
    // - 다른 라이브러리들은 필요할 때마다 익히기 바란다.

    // [관심 가져야할 주요 표준 라이브러리]
    // - 컬렉션 프레임워크와 스트림 라이브러리도 계속 살펴보고 유용한 기능을 익혀야 한다.
    // - java.util.concurrent 패키지도 알아두면 큰 도움이 된다.
    //   이 패키지는 멀티스레드 프로그래밍 작업을 단순화해주는 고수준의 편의 기능은 물론
    //   능숙한 개발자가 자신만의 고수준 개념을 직접 구현할 수 있도록 도와주는 저수준의 도구도 제공한다.

    // [기능을 구현하기 전에 확인할 것]
    // 1) 표준 라이브러리에서 찾아라.
    // 2) 서드파티 라이브러리에서 찾아라. 예) Google Guava, Apache Commons
    // 3) 직접 구현하라. 단, 정말 필요한 경우에만.
  }
}
