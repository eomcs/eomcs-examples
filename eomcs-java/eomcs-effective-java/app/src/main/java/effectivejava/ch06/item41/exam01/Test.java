// # 아이템 41. 정의하려는 것이 타입이라면 마커 인터페이스를 사용하라
// [마커 인터페이스]
// - 아무 메서드도 담고 있지 않고, 단지 자신을 구현하는 클래스가 특정 속성을 가짐을 표시하는 인터페이스이다.
//   예) Serializable, Cloneable 등
// - Serializable 인터페이스:
//   자신을 구현한 클래스의 인스턴스는 ObjectOutputStream을 통해 직렬화될 수 있음을 표시한다.
//
// [마커 인터페이스가 마커 애노테이션 보다 나은 점]
// 1) 마커 인터페이스는 이를 구현한 클래스의 인스턴스들을 구분하는 타입으로 쓸 수 있다.
//    마커 애노테이션은 그렇지 않다.
//    ObjectOutputStream의 writeObject() 파라미터 타입이 Serializable이었으면
//    컴파일할 때 오류를 잡아낼 수 있었을 것이다. 인터페이스도 타입이라는 이점을 살리지 못했다.
// 2) 마커 인터페이스는 적용 대상을 더 정밀하게 지정할 수 있다.
//    마커 애노테이션의 경우 @Target(ElementType.TYPE)은 모든 타입(클래스, 인터페이스, 열거타입, 애너테이션)에 달 수 있다.
//    부착할 수 있는 타입을 더 세밀하게 제한하지는 못한다.
//    인터페이스로 특정 메서드를 가진 클래스를 구분하는 용도로 쓸 수 있다.
//
// [마커 애노테이션을 사용할 때]
// - 클래스와 인터페이스 외의 프로그램 요소(모듈, 패키지, 필드, 지역변수, 메서드 등)에 마킹할 때
// - 애노테이션을 적극 활용하는 프레임워크에서는 마커 애너테이션을 쓰는 쪽이 더 일관성을 지키는 데 좋다.
// - 마커 인터페이스를 메서드의 파라미터로 사용할 일이 없을 때
//
// [마커 인터페이스를 사용할 때]
// - 클래스나 인터페이스를 적용해야 한다면,
//   "이 마킹이 된 객체를 파라미터로 받는 메서드를 작성할 일이 있을까?" 라는 질문에 답이 "예"라면,
//   마커 인터페이스를 사용하라.
//   마커 인터페이스를 메서드의 파라미터로 사용하면 컴파일타임에 오류를 잡아 낼 수 있다.

package effectivejava.ch06.item41.exam01;

// [주제] 마커 인터페이스와 마커 애너테이션 비교
// - 적용 대상이 ElementType.TYPE인 마커 애너테이션을 작성하고 있다면,
//   잠시 여유를 갖고 정말 애너테이션으로 구현하는 게 옳은지,
//   혹은 마커 인터페이스가 낫지는 않은지 곰곰히 생각해보자.

public class Test {
  public static void main(String[] args) {}
}
