// # 아이템 83. 지연 초기화는 신중히 사용하라
// [지연 초기화(lazy initialization)]
// - 필드의 초기화 시점을 그 값이 처음 필요할 때까지 늦추는 기법이다.
//   그래서 값이 전혀 쓰이지 않으면 초기화도 결코 일어나지 않는다.
// - 정적 필드나 인스턴스 필드 모두에 적용할 수 있다.
// - 주로 최적화 용도로 쓰이지만,
//   클래스와 인스턴스 초기화 때 발생하는 위험한 순환 문제를 해결하는 효과도 있다.
//
// [지연 초기화 가이드라인]
// - 대부분의 필드는 지연시키지 말고 곧바로 초기화해야 한다.
// - 필요할 때까지는 지연 초기화를 사용하지 말라.
//   클래스 혹은 인스턴스 생성 시의 초기화 비용은 줄지만,
//   그 대신 지연 초기화하는 필드에 접근하는 비용이 커진다.
// - 해당 클래스의 인스턴스 중 그 필드를 사용하는 인스턴스 비율이 낮은 반면,
//   그 필드를 초기화하는 비용이 크다면 지연 초기화를 고려해볼 만하다.
//   단 지연 초기화 적용 전후의 성능을 측정해보라.
// - 성능 때문에 혹은 위험한 초기화 순환을 막기 위해 꼭 지연 초기화를 써야 한다면,
//   올바른 지연 초기화 기법을 사용하라.
// - 인스턴스 필드에는 이중검사 관용구를,
//   정적 필드에는 지연 초기화 홀더 클래스 관용구를 사용하라.
// - 반복해 조기화해도 괜찮은 인스턴스 필드에는 단일검사 관용구도 괜찮다.
// - 멀티스레드 환경에서는 지연 초기화를 하기가 까다롭다.
//   지연 초기화하는 필드를 둘 이상의 스레드가 공유한다면 어떤 형태로든 반드시 동기화해야 한다.
//
package effectivejava.ch11.item83.exam01;

// [주제] 지연 초기화 기법 - synchronized 접근자 방식
// - 대부분의 상황에서는 일반적인 초기화가 낫다.

import java.util.List;

public class Test {
  // 인스턴스 필드를 초기화하는 일반적인 방법
  private final List<String> list = initialize();

  private List<String> initialize() {
    return List.of("A", "B", "C");
  }

  // 인스턴스 필드의 지연 초기화 - synchronized 접근자 방식
  // - 정적 필드에도 적용할 수 있다.
  private final List<String> list2 = initialize();

  public synchronized List<String> getList() {
    if (list2 == null) {
      return initialize();
    }
    return list2;
  }

  public static void main(String[] args) {}
}
