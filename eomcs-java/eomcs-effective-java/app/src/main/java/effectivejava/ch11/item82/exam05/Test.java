// # 아이템 82. 스레드 안전성 수준을 문서화하라
// - 모든 클래스가 자신의 스레드 안전성 정보를 명확히 문서화해야 한다.
// - 정확한 언어로 명확히 설명하거나 스레드 안전성 애너테이션을 사용할 수 있다.
// - synchronized 한정자는 문서화와 관련이 없다.
//   메서드 선언에 synchronized 한정자를 선언할지는 구현 이슈일 뿐 API에 속하지 않는다.
// - 조건부 스레드 안전 클래스는 메서드를 어떤 순서로 호출할 때 외부 동기화가 요구되고,
//   그때 어떤 락을 얻어야 하는지도 알려줘야 한다.
// - 무조건적인 스레드 안전 클래스를 작성할 때는 synchronized 메서드가 아닌
//   비공개 lock 객체를 사용하라.
//   이렇게 해야 클라이언트나 하위 클래스에서 공기화 메커니즘을 깨뜨리는 걸 예방할 수 있고,
//   필요하다면 다음에 더 정교한 동시성을 제어 메커니즘으로 재구현할 여지가 생긴다.
// - 멀티스레드 환경에서도 API를 안전하게 사용하게 하려면
//   클래스가 지원하는 스레드 안정성 수준을 정확히 명시해야 한다.

package effectivejava.ch11.item82.exam05;

// [주제] 비공개 lock 객체 사용법 - 서비스 거부 공격을 막아준다.
// 클래스가 lock을 외부로 공개했을 때,
// 1) 장점
//    - 클라이언트는 일련의 메서드 호출을 원자적으로 수행할 수 있다.
// 2) 단점
//    - 고성능 동시성 제어 메커니즘과 혼용할 수 없다.
//      ConcurrentHashMap 같은 동시성 컬렉션과는 함께 사용할 수 없다.
//    - 클라이언트가 공개된 lock을 오래 쥐고 놓지 않는
//      서비스 거부 공격(denial-of-service attack)을 수행할 수 있다.
//
// 공개했을 때 얻는 이점보다 단점이 훨씬 크므로 비공개 lock 객체를 사용하라.

public class Test {

  // - private 으로 lock 객체가 외부로 노출되지 않도록 한다
  // - final 로 lock 객체가 변경되지 않도록 한다.
  private final Object lock = new Object();

  public void foo() {
    synchronized (lock) {
      // 임계 영역
    }
  }

  public static void main(String[] args) {
    // [정리]
    // - 비공개 lock 객체 관용구는 무조건적 스레드 안전 클래스에서만 사용할 수 있다.
    // - 조건부 스레드 안전 클래스에서는 특정 호출 순서에 필요한 lock이 무엇인지를
    //   클라이언트에게 알려줘야 하므로 이 관용구를 사용할 수 없다.
    // - 비공개 lock 객체 관용구는 상속용으로 설계한 클래스에 더욱 적합하다.
    // [주의!]
    // - 상속용 클래스에서 자신의 인스턴스를 lock으로 사용한다면,
    //   하위 클래스는 의도치 않게 기반 클래스의 동작을 방해할 수 있다.
    //   그 반대도 마찬가지다.
    //   같은 락을 다른 목적으로 사용하게 되어
    //   하위 클래스와 기반 클래스는 '서로가 서로를 훼방놓는' 상태에 빠질 수 있다.
  }
}
