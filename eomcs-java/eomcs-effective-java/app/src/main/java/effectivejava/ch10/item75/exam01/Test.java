// # 아이템 75. 예외의 상세 메시지에 실패 관련 정보를 담으라
// - 예외를 잡지 못해 프로그램이 실패하면, 자바 시스템은 그 예외의 스택 추적 정보를 자동으로 출력한다.
//   스택 추적은 예외 객체의 toString() 메서드를 호출해 얻는 문자열로,
//   보통은 예외 클래스의 이름 뒤에 상세 페이지가 붙는 형태다.
//   이 정보가 실패 원인을 분석해야 하는 프로그래머 혹은 사이트 신뢰성 엔지니어(SRE)가
//   얻을 수 있는 유일한 정보인 경우가 많다.
//   그 실패를 재현하기 어렵다면, 더 자세한 정보를 얻기가 어렵거나 불가능하다.
//   따라서, 예외의 toString() 메서드에 실패 원인에 관한 정보를
//   가능한 한 많이 담아 반환하는 일은 아주 중요하다.
// - 사후 분석을 위해 실패 순간의 상황을 정확히 포착해 예외의 상세 메시지에 담아야 한다.
//   실패 순간을 포착하려면 발생한 예외에 관여된 모든 파라미터와 필드의 값을 실패 메시지에 담아야 한다.
//   단, 보안과 관련된 정보는 주의해서 다뤄야 한다.
//   상세 메시지에 비밀번호나 암호 키 같은 정보까지 담아서는 안된다.
// - 관련 데이터를 모두 담아야 하지만 장황할 필요는 없다.
//   문제를 분석하는 사람은 스택 추적뿐 아니라 관련 문서와 소스코드를 함께 살펴본다.
// - 예외의 상세 메시지와 최종 사용자에게 보여줄 오류 메시지를 혼동해서는 안된다.
//   최종 사용자에게는 친절한 안내 메시지를 보여줘야 하는 반면,
//   예외 메시지는 가독성 보다는 담긴 내용이 훨씬 중요하다.
//   예외 메시지의 주 소비층은 문제를 분석해야 할 프로그래머와 SRE 엔지니어이기 때문이다.
//   최종 사용자 메시지는 현지어로 번역해주기도 하지만, 예외는 아니다.
//
package effectivejava.ch10.item75.exam01;

// [주제] 예외 클래스의 생성자와 예외 메시지
// - 실패를 적절히 포착하려면 필요한 정보를 예외 생성자에서 모두 받아서
//   상세 메시지까지 미리 생성해놓는 방법도 괜찮다.
// - 이렇게 해두면 프로그래머가 던지는 예외는 자연스럽게 실패를 더 잘 포착한다.
// - 포착한 실패 정보는 예외 상황을 복구하는 데 유용할 수 있으므로
//   검사 예외일 경우 접근자 메서드를 제공하는 것이 좋다.
// - 비검사 예외라도 상세 정보를 알려주는 접근자 메서드를 제공하는 것이 좋다.

class IndexOutOfBoundsException extends RuntimeException {
  final int lowerBound;
  final int upperBound;
  final int index;

  public IndexOutOfBoundsException(int lowerBound, int upperBound, int index) {

    // 실패를 포착하는 상세 메시지를 여기서 만든다.
    super(String.format("최솟값: %d, 최댓값: %d, 입력값: %d", lowerBound, upperBound, index));

    this.lowerBound = lowerBound;
    this.upperBound = upperBound;
    this.index = index;
  }
}

public class Test {

  public static void main(String[] args) throws Exception {}
}
